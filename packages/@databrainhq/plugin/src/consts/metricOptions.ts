import {
  ChartSettingsType,
  DatasetMetricCreationConfiguration,
  FloatingDropDownOption,
} from '@/types';

export const RowLimitList = [
  {
    value: '100',
    label: '100',
  },
  {
    value: '200',
    label: '200',
  },
  {
    value: '300',
    label: '300',
  },
  {
    value: '400',
    label: '400',
  },
  {
    value: '500',
    label: '500',
  },
  {
    value: '1000',
    label: '1000',
  },
  {
    value: '3000',
    label: '3000',
  },
  {
    value: '5000',
    label: '5000',
  },
];
export const AggregateList = [
  { value: 'AVG', label: 'AVG' },
  { value: 'SUM', label: 'SUM' },
  { value: 'COUNT', label: 'COUNT' },
  { value: 'COUNT_DISTINCT', label: 'COUNT_DISTINCT' },
  { value: 'MAX', label: 'MAX' },
  { value: 'MIN', label: 'MIN' },
];
export const TableRowsList = [
  { label: 'Show 10', value: '10' },
  { label: 'Show 25', value: '25' },
  { label: 'Show 50', value: '50' },
  { label: 'Show 75', value: '75' },
  { label: 'Show 100', value: '100' },
  { label: 'Show 250', value: '250' },
  { label: 'Show 500', value: '500' },
  { label: 'Show 1k', value: '1000' },
  // { label: '2k', value: '2000' },
  // { label: '5k', value: '5000' },
];

export const NUMBER_TYPES = [
  'fixed',
  'real',
  'int',
  'bigint',
  'float',
  'number',
  'integer',
  'int64',
  'float64',
  'double precision',
  'smallint',
];
export const STRING_TYPES = [
  'varchar',
  'text',
  'char',
  'text',
  'character(36)',
  'string',
];
export const DATE_TYPES = [
  'timestamp_ltz',
  'date',
  'timestamp',
  'timestamp without time zone',
  'timestamp with time zone',
  'datetime',
];
export const ARRAY_TYPES = ['array', 'text[]'];
export const BOOLEAN_TYPES = ['boolean', 'bool'];
export const configTabs = ['saved', 'simple', 'custom'];
export const GRADIENTS = [
  {
    start: '#FF5733',
    end: '#DAF7A6',
    offset1: 0.2,
    offset2: 0.8,
    direction: 'top',
  },
  {
    start: '#C70039',
    end: '#900C3F',
    offset1: 0.1,
    offset2: 1.0,
    direction: 'top',
  },
  {
    start: '#4A148C',
    end: '#E1BEE7',
    offset1: 0.3,
    offset2: 0.7,
    direction: 'bottom',
  },
  {
    start: '#00838F',
    end: '#00E5FF',
    offset1: 0.1,
    offset2: 0.9,
    direction: 'top',
  },
  {
    start: '#FFD600',
    end: '#FF6F00',
    offset1: 0.25,
    offset2: 0.75,
    direction: 'bottom',
  },
];
export const DEFAULT_CHART_SETTINGS: ChartSettingsType = {
  comboBarList: [],
  chartType: 'line',
  xAxis: '',
  yAxisList: [],
  stackTableCols: [],
  singleValue: '',
  chartColors: [],
  sankeyValues: [],
  step: '',
  measure: '',
  selectedSeries: [],
  percentageSize: 20,
  margins: {
    marginTop: 20,
    marginBottom: 10,
    marginLeft: 5,
    marginRight: 5,
  },
  labelSettings: {
    axis: 'left',
    show: false,
    position: 'hidden',
    truncateLabelValue: 14,
    showLabelLine: false,
    isEnableValueSummation: false,
    truncateLabel: true,
    XAxisStyle: {
      size: 12,
      family: 'Inter',
      weight: 400,
      color: '#000000',
      axisName: '',
      axisPadding: 40,
    },
    YAxisStyle: {
      size: 12,
      family: 'Inter',
      weight: 400,
      color: '#000000',
      axisName: '',
      axisPadding: 60,
    },
  },
  legendSettings: {
    show: true,
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    position: 'horizontal',
    truncateLegendValue: 22,
    legendShape: 'roundRect',
    customise: false,
    fixedPosition: 'top-left',
    disableScroll: false,
  },
  customSettings: {
    hideXSplitLines: false,
    hideYSplitLines: false,
    hideXAxisLines: false,
    hideYAxisLines: false,
    isStackBar: false,
    barWidth: 20,
    barRadius: [0, 0, 0, 0],
    hideXAxisLabels: false,
    hideYAxisLabels: false,
    fontSize: 35,
    subHeaderShow: false,
    displayText: '',
    subHeaderFontSize: 15,
    dateFormatter: 'none',
    numberFormatter: 'original',
    xRotation: 50,
    showLabelValues: false,
    comparisonTimePeriod: 0,
    comparisonTimeColumn: '',
    comparisonValueShow: false,
    comparisonValueFontSize: 12,
    comparisonSuffix: '',
    singleValConditionalFormatter: [],
    isShowTrendLine: false,
    hideNullValues: true,
    chartZoom: {
      isZoomEnabled: false,
      zoomAxis: 'x',
      zoomOnMouseWheel: true,
    },
    showDynamicBehaviour: false,
    isEnableLabelTooltip: true,
    roseType: 'radius',
    selectedMode: 'single',
    selectedOffset: 0,
    gradients: [],
    isShowBarGradient: false,
    barGradient: {
      startColor: '#FFFFFF',
      endColor: '#000000',
      offset1: 1,
      offset2: 0.05,
      direction: 'left',
    },
    enableBackgroundGradient: false,
    backgroundGradient: {
      startColor: '#FFFFFF',
      endColor: '#000000',
      offset1: 1,
      offset2: 0.05,
      direction: 'left',
    },
    labelPrefix: '',
    labelSuffix: '',
    comboAxisSymbols: [],
    singleValueFontColor: '#000000',
    enableTitleDesc: false,
    chartDesc: '',
    chartTitle: '',
    titlePosition: '',
    cumulativeBar: false,
    stepPadding: 10,
    showFunnelShadow: false,
    showSelectLegend: false,
    showStackLabels: false,
    singleValuePrefix: '',
    singleValueSuffix: '',
    coloredBars: false,
    customRotation: 0,
    comboLabelFormatter: [],
  },
  tableSettings: {
    headerFontBold: false,
    contentAlignment: 'center',
    hideTableHeader: false,
    lineGap: 'small',
    tableTitle: '',
    hideVerticalDivider: true,
    hideHorizontalDivider: false,
    enableStripedRows: false,
    showRowHover: true,
    showTableTitle: false,
    showTableDesc: false,
    enableTableSearch: true,
    enableFilter: true,
    enableSorting: true,
    defaultRowSize: '10',
    isServerSidePagination: false,
    conditionalFormatting: [],
    badgeColumns: [],
    badgeColors: {},
    badgeTextColors: {},
    badgeSeparator: ',',
    listColumns: [],
    listSeparator: ',',
    stackColAlias: '',
    isSortAlphabetically: false,
    customHeaderColor: {
      isEnabled: false,
      color: '',
      textColor: '',
    },
  },
  pivotTableSettings: {
    rows: [],
    columns: [],
  },
  pivotTableSettings2: {
    measures: [],
    dimensions: [],
    headers: [],
    isDynamicHeaders: false,
    aggregates: [],
    dims: [],
  },
  gaugeSettings: {
    metric: '',
    dimensions: [],
  },
  axisSettings: {
    axis: 'left',
  },
  backGroundColor: {
    show: false,
  },
  timeSeriesSettings: {
    groupBySettings: {
      isDynamic: false,
      options: [],
      value: 'monthly',
      fillXAxis: false,
    },
    seriesType: [],
  },
  isDynamicSeries: false,
  isMultiDimension: false,
  seriesField: 'ungrouped',
  seriesOptions: [],
  ungroupedAlias: 'ungrouped',
  dynamicXAxis: {
    isEnabled: false,
    options: [],
    selectedOption: { value: '', label: '' },
  },
};

export const FORMATTING_CONDITIONS_OPTIONS = [
  { value: 'isEqualTo', label: 'is equal to' },
  { value: 'isNotEqualTo', label: 'is not equal to' },
  { value: 'isNull', label: 'is null' },
  { value: 'isNotNull', label: 'is not null' },
  { value: 'contains', label: 'contains' },
  { value: 'doesNotContain', label: 'not contain' },
  { value: 'startsWith', label: 'starts with' },
  { value: 'endsWith', label: 'ends with' },
  { value: 'isLessThan', label: 'is less than' },
  { value: 'isGreaterThan', label: 'is greater than' },
  { value: 'isLessThanOrEqualTo', label: 'is less than equal to' },
  { value: 'isGreaterThanOrEqualTo', label: 'is greater than equal to' },
];

export const TIME_GRAIN_OPTIONS = [
  {
    value: 'day',
    label: 'Day',
  },
  {
    value: 'week',
    label: 'Week',
  },
  {
    value: 'month',
    label: 'Month',
  },
  {
    value: 'quarter',
    label: 'Quarter',
  },
  {
    value: 'year',
    label: 'Year',
  },
  {
    value: 'NONE',
    label: 'Original Value',
  },
];

export const DEFAULT_FORECAST_VALUES = {
  isEnable: false,
  forecastPeriods: 10,
  modelName: 'ARIMA',
  confidenceInterval: 0.95,
  timeColumnName: '_timestamp',
  measureColumnName: '',
  timeGrain: 'Y',
  yearlySeasonality: false,
  weeklySeasonality: false,
  dailySeasonality: false,
  orderP: 1,
  orderD: 1,
  orderQ: 1,
  trend: { value: 't', label: 'linear' },
  growth: 'linear',
};

export const DEFAULT_CREATE_DATSET_METRIC_CONFIG: DatasetMetricCreationConfiguration =
  {
    aggregates: [],
    dimensions: [],
    filters: [],
    isEnableDrill: false,
    limit: '100',
    orders: [],
    table: { name: '', alias: '', id: '', joins: [], schema: '' },
    forecast: DEFAULT_FORECAST_VALUES,
    groupByColumnList: [],
  };

export const SORT_TYPE = [
  { value: 'ASC', label: 'Ascending' },
  { value: 'DESC', label: 'Descending' },
];

export const operatorList = [
  {
    value: '=',
    label: 'Equal to (=)',
  },
  {
    value: '<>',
    label: 'Not equal to (!=)',
  },
  {
    value: '<',
    label: 'Less than (<)',
  },
  {
    value: '<=',
    label: 'Less or equal (<=)',
  },
  {
    value: '>',
    label: 'Greater than (>)',
  },
  {
    value: '>=',
    label: 'Greater or equal (>=)',
  },
  {
    value: 'IN',
    label: 'In',
  },
  {
    value: 'NOT IN',
    label: 'Not in',
  },
  {
    value: 'LIKE (case sensitive)',
    label: 'Like (case sensitive)',
  },
  {
    value: 'REGEX',
    label: 'Regex',
  },
  {
    value: 'IS NOT NULL',
    label: 'Is not null',
  },
  {
    value: 'IS NULL',
    label: 'Is null',
  },
];

export const RELATION_OPERATOR_LIST = [
  { value: 'AND', label: 'AND' },
  { label: 'OR', value: 'OR' },
];

export const STRING_OPERATOR_LIST = [
  {
    value: '=',
    label: 'Equal to (=)',
  },
  {
    value: '<>',
    label: 'Not equal to (!=)',
  },
  {
    value: 'IN',
    label: 'In',
  },
  {
    value: 'NOT IN',
    label: 'Not in',
  },
  {
    value: 'LIKE (case sensitive)',
    label: 'Like (case sensitive)',
  },
  {
    value: 'REGEX',
    label: 'Regex',
  },
  {
    value: 'IS NOT NULL',
    label: 'Is not null',
  },
  {
    value: 'IS NULL',
    label: 'Is null',
  },
];

export const NUMBER_OPERATOR_LIST = [
  {
    value: '=',
    label: 'Equal to (=)',
  },
  {
    value: '<>',
    label: 'Not equal to (!=)',
  },
  {
    value: '<',
    label: 'Less than (<)',
  },
  {
    value: '<=',
    label: 'Less or equal (<=)',
  },
  {
    value: '>',
    label: 'Greater than (>)',
  },
  {
    value: '>=',
    label: 'Greater or equal (>=)',
  },
  {
    value: 'IN',
    label: 'In',
  },
  {
    value: 'NOT IN',
    label: 'Not in',
  },
  {
    value: 'IS NOT NULL',
    label: 'Is not null',
  },
  {
    value: 'IS NULL',
    label: 'Is null',
  },
];
export const TIME_OPERATOR_LIST = [
  {
    value: '=',
    label: 'Equal to (=)',
  },
  {
    value: '<>',
    label: 'Not equal to (!=)',
  },
  {
    value: '<',
    label: 'Less than (<)',
  },
  {
    value: '<=',
    label: 'Less or equal (<=)',
  },
  {
    value: '>',
    label: 'Greater than (>)',
  },
  {
    value: '>=',
    label: 'Greater or equal (>=)',
  },
  {
    value: 'IN',
    label: 'In',
  },
  {
    value: 'NOT IN',
    label: 'Not in',
  },
  {
    value: 'IS NOT NULL',
    label: 'Is not null',
  },
  {
    value: 'IS NULL',
    label: 'Is null',
  },
];
export const DBN_SQL_TABLE = 'dbn_sql_table';

export const DATASET_TIME_HELPER_FUNCTIONS: FloatingDropDownOption[] = [
  {
    value: 'minute',
    label: 'Minute',
  },
  {
    value: 'hours',
    label: 'Hours',
  },
  {
    value: 'day',
    label: 'Day',
  },
  {
    value: 'week',
    label: 'Week',
  },
  {
    value: 'month',
    label: 'Month',
  },
  {
    value: 'quarter',
    label: 'Quarter',
  },
  {
    value: 'year',
    label: 'Year',
  },
  {
    value: 'minute of hour',
    label: 'Minute of Hour',
  },
  {
    value: 'hour of day',
    label: 'Hour of Day',
  },
  {
    value: 'day of week',
    label: 'Day of Week',
  },
  {
    value: 'day of month',
    label: 'Day of Month',
  },
  {
    value: 'day of year',
    label: 'Day of Year',
  },
  {
    value: 'week of year',
    label: 'Week of Year',
  },
  {
    value: 'month of year',
    label: 'Month of Year',
  },
  {
    value: 'quarter of year',
    label: 'Quarter of Year',
  },
  {
    value: 'year of date',
    label: 'Year of Date or Timestamp',
  },
  {
    value: 'to_char(month)',
    label: 'Month Name',
  },
  {
    value: 'date format',
    label: 'Format Date',
    subValue: 'Default: yyyy-mm-dd',
  },
  { value: 'ALL', label: 'COUNT ROW' },
  { value: 'COUNT', label: 'COUNT' },
  { value: 'COUNT_DISTINCT', label: 'COUNT_DISTINCT' },
  {
    value: 'NONE',
    label: 'Original Value',
  },
];
export const DATASET_STRING_HELPER_FUNCTIONS = [
  { value: 'ALL', label: 'COUNT ROW' },
  { value: 'COUNT', label: 'COUNT' },
  { value: 'COUNT_DISTINCT', label: 'COUNT_DISTINCT' },
  { value: 'lowercase', label: 'Lowercase' },
  { value: 'uppercase', label: 'Uppercase' },
  {
    value: 'NONE',
    label: 'Original Value',
  },
];
export const LEAST_USED_STRING_FUNCTIONS = ['lowercase', 'uppercase'];
export const DATASET_NUMBER_HELPER_FUNCTIONS = [
  { value: 'round', label: 'Round' },
  { value: 'floor', label: 'Floor' },
  { value: 'abs', label: 'Absolute' },
  { value: 'ceil', label: 'Ceil' },
  { value: 'sqrt', label: 'Square root' },
  { value: 'exp', label: 'Exponent' },
  { value: 'log', label: 'Log' },
  { value: 'log10', label: 'Log 10' },
  { value: 'ALL', label: 'COUNT ROW' },
  { value: 'AVG', label: 'AVG' },
  { value: 'SUM', label: 'SUM' },
  { value: 'COUNT', label: 'COUNT' },
  { value: 'COUNT_DISTINCT', label: 'COUNT_DISTINCT' },
  { value: 'MAX', label: 'MAX' },
  { value: 'MIN', label: 'MIN' },
  {
    value: 'NONE',
    label: 'Original Value',
  },
];

export const aggregateStrings = [
  'ALL',
  'AVG',
  'SUM',
  'COUNT',
  'COUNT_DISTINCT',
  'MAX',
  'MIN',
];
export const FUNCTIONS_SYNONYMNS: Record<string, string[]> = {
  minute: [
    'Minute',
    'Min',
    '60 seconds',
    'Time unit: minute',
    'One-sixtieth of an hour',
  ],
  hours: [
    'Hours',
    'Hrs',
    'Time unit: hours',
    'Multiple of 60 minutes',
    'Clock time',
  ],
  day: ['Day', '24 hours', 'Time unit: day', '24-hour period', 'Solar day'],
  week: ['Week', '7 days', 'Time unit: week', 'Seven-day period', 'Seven days'],
  month: [
    'Month',
    '30 or 31 days',
    'Time unit: month',
    'Calendar month',
    '30 to 31 days',
    'monthly',
  ],
  quarter: [
    'Quarter',
    '3 months',
    'Time unit: quarter',
    'Three-month period',
    'One-fourth of a year',
    'quarterly',
  ],
  year: [
    'Year',
    '365 days',
    'Time unit: year',
    '365-day period',
    'Annual',
    'yearly',
  ],
  'minute of hour': [
    'Minute of Hour',
    'Time within an hour',
    'Part of an hour',
    'Single minute within an hour',
  ],
  'hour of day': [
    'Hour of Day',
    'Time within a day',
    'Part of a day',
    'Single hour within a day',
  ],
  'day of week': [
    'Day of Week',
    'Day in a week',
    'Weekday',
    'Specific day within a week',
  ],
  'day of month': [
    'Day of Month',
    'Day in a month',
    'Specific day within a month',
    'Date within a month',
  ],
  'day of year': [
    'Day of Year',
    'Day in a year',
    'Specific day within a year',
    'Date within a year',
  ],
  'week of year': [
    'Week of Year',
    'Week in a year',
    'Specific week within a year',
    'Week number within a year',
  ],
  'month of year': [
    'Month of Year',
    'Month in a year',
    'Specific month within a year',
    'Month number within a year',
  ],
  'quarter of year': [
    'Quarter of Year',
    'Quarter in a year',
    'Specific quarter within a year',
    'Quarter number within a year',
  ],
  'year of date': [
    'Year of Date or Timestamp',
    'Year from a date',
    'Year from a timestamp',
    'Calendar year',
  ],
  'to_char(month)': [
    'Month Name',
    'Month abbreviation',
    'Name of the month',
    'Text representation of the month',
  ],
  'date format': [
    'Format Date',
    'Formatting date',
    'Date representation',
    'Date formatting',
    'Default: yyyy-mm-dd',
  ],
  lowercase: [
    'Lowercase',
    'Lower case',
    'Lowercased',
    'Convert to lowercase',
    'Small letters',
    'Minuscule',
  ],
  uppercase: [
    'Uppercase',
    'Upper case',
    'Uppercased',
    'Convert to uppercase',
    'Capital letters',
    'Majuscule',
  ],
  round: [
    'Round',
    'Rounding',
    'Rounded',
    'Approximate',
    'Closest integer',
    'Nearest whole number',
  ],
  floor: [
    'Floor',
    'Lower',
    'Down',
    'Ground',
    'Base',
    'Bottom',
    'Minimum',
    'Lowest',
  ],
  abs: ['Absolute', 'Absolute value', 'Magnitude', 'Positive', 'Non-negative'],
  ceil: ['Ceil', 'Ceiling', 'Upper', 'Up', 'Top', 'Maximum', 'Highest'],
  sqrt: ['Square root', 'Root', 'Radical', 'Sqrt', 'Square root function'],
  exp: [
    'Exponent',
    'Exponential',
    'Power',
    'Raised to the power of',
    'Elevated',
  ],
  log: [
    'Log',
    'Logarithm',
    'Logarithmic',
    'Logarithmic function',
    'Log base e',
  ],
  log10: [
    'Log 10',
    'Logarithm base 10',
    'Common logarithm',
    'Decimal logarithm',
    'Logarithmic',
  ],
  ALL: [
    'Every',
    'Each',
    'Whole',
    'Total',
    'Complete',
    'Entire',
    'Full',
    'Global',
    'Aggregate',
    'Comprehensive',
    'Overall',
    'Summation',
    'Totality',
    'Entirety',
    'Gross',
    'Universal',
    'Across-the-board',
    'Full-scale',
    'Every bit',
    'Without exception',
    'In total',
    'Collectively',
    'En masse',
    'In entirety',
    'All in all',
    'Overall',
    // ... Add more synonyms for 'ALL'
  ],
  AVG: [
    'Average',
    'Mean',
    'Median',
    'Normal',
    'Typical',
    'Standard',
    'Regular',
    'Ordinary',
    'Usual',
    'Common',
    'General',
    'Run-of-the-mill',
    'Middle-of-the-road',
    'Moderate',
    'Medium',
    'Balanced',
    'Central',
    'Intermediate',
    'Fair',
    'Standardized',
    'Norm',
    // ... Add more synonyms for 'AVG'
  ],
  SUM: [
    'Addition',
    'Total',
    'Aggregate',
    'Summation',
    'Tally',
    'Grand total',
    'Entirety',
    'Whole',
    'Full amount',
    'Complete',
    'Accumulation',
    'Aggregation',
    'Collective',
    'Comprehensive',
    'Gross',
    'Overall',
    'Totality',
    'Sum total',
    'Entire',
    'Whole shebang',
    'Everything',
    'All in all',
    'Entire sum',
    'Total number',
    'The whole enchilada',
    // ... Add more synonyms for 'SUM'
  ],
  COUNT: [
    'Tally',
    'Enumeration',
    'Numeration',
    'Reckoning',
    'Calculation',
    'Tabulation',
    'Score',
    'Record',
    'Registry',
    'Inventory',
    'Census',
    'Roster',
    'List',
    'Roll',
    'Headcount',
    'Aggregate',
    'Calculation',
    'Reckoning',
    'Calculation',
    // ... Add more synonyms for 'COUNT'
  ],
  COUNT_DISTINCT: [
    'Unique count',
    'Distinct count',
    'Different count',
    'Separate count',
    'Individual count',
    'Specific count',
    'Special count',
    'Singular count',
    'Sole count',
    'Exclusive count',
    'Only count',
    'Non-repeating count',
    'Uncommon count',
    'Rare count',
    'Unusual count',
    'Exceptional count',
    'Extraordinary count',
    'Peculiar count',
    'One-of-a-kind count',
    'Particular count',
    // ... Add more synonyms for 'COUNT_DISTINCT'
  ],
  MAX: [
    'Maximum',
    'Highest',
    'Greatest',
    'Utmost',
    'Top',
    'Best',
    'Peak',
    'Supreme',
    'Ultimate',
    'Optimal',
    'Pinnacle',
    'Zenith',
    'Apex',
    'Acme',
    'Culmination',
    'Climax',
    'Apogee',
    'Crest',
    'Summit',
    'High point',
    // ... Add more synonyms for 'MAX'
  ],
  MIN: [
    'Minimum',
    'Lowest',
    'Smallest',
    'Least',
    'Tiniest',
    'Minor',
    'Inferior',
    'Base',
    'Subtlest',
    'Petite',
    'Microscopic',
    'Micro',
    'Minuscule',
    'Nano',
    'Diminutive',
    'Lilliputian',
    'Trivial',
    'Modest',
    'Insignificant',
    'Token',
    'Smidgen',
    'Scant',
    'Scintilla',
    'Smidge',
    // ... Add more synonyms for 'MIN'
  ],
};
export const SORT_SYNONYMNS: Record<string, string[]> = {
  DESC: [
    'desc',
    'top',
    'decreasing',
    'falling',
    'declining',
    'dropping',
    'descending',
    'sinking',
    'diminishing',
    'dwindling',
    'plummeting',
    'sliding',
    'subsiding',
    'lowering',
    'collapsing',
    'shrinking',
    'tumbling',
    'retreating',
    'regressing',
    'receding',
    'receding',
    'ebbing',
    'going down',
    'descending order',
    'falling off',
    'plunging',
    'nose-diving',
    'falling down',
    'depleting',
    'diminution',
    'vanishing',
    'waning',
    'contracting',
    'eroding',
    'fading',
    'sinking',
    'dropping off',
    'deteriorating',
    'disappearing',
    'going under',
    'caving in',
    'lowering down',
    'downward',
    'downhill',
    'going south',
    'subsiding',
    'downgrade',
    'going lower',
    'going downhill',
    'going back',
    'going backward',
    'going into a tailspin',
    'going to the bottom',
    'dipping',
    'depreciating',
    'going to zero',
    'de-escalating',
    'falling away',
    'slumping',
    'retrograding',
    'going to the dogs',
    'going to pieces',
    'on the decline',
    'falling rapidly',
    'going to the bottom',
    'going through the floor',
    'going downwards',
    'going in a nosedive',
    'going to ground',
    'dropping rapidly',
    'going to rock bottom',
    'going to a lower level',
    'going down the drain',
    'going to the depths',
    'dropping like a stone',
    'dropping like a lead balloon',
    'going to ruin',
    'going to seed',
    'going to waste',
    'going to the dogs',
    'going to the wall',
    'going to pot',
    'falling headlong',
    'going pear-shaped',
    'dropping like flies',
    'going to rack and ruin',
    'going haywire',
    'going astray',
    'going awry',
    'going adrift',
    'falling sharply',
    'falling precipitously',
    'going steeply',
    'going sharply',
    'going through the floor',
    'falling to pieces',
    'falling to bits',
    'going off a cliff',
    'going through the basement',
    'falling to the ground',
    'going to the floor',
    'going to the lowest point',
  ],
  ASC: [
    'ascending',
    'asc',
    'bottom',
    'increasing',
    'rising',
    'climbing',
    'growing',
    'advancing',
    'surging',
    'mounting',
    'soaring',
    'uplifting',
    'escalating',
    'appreciating',
    'spiraling',
    'boosting',
    'augmenting',
    'amplifying',
    'intensifying',
    'multiplying',
    'mushrooming',
    'skyrocketing',
    'advancing',
    'moving up',
    'going up',
    'upward',
    'upswing',
    'upturn',
    'upward trend',
    'soaring',
    'building',
    'progressing',
    'ascendant',
    'skyward',
    'zooming',
    'sweeping up',
    'heightening',
    'lifting',
    'elevating',
    'gaining ground',
    'improving',
    'rolling up',
    'cresting',
    'reaching new heights',
    'upward climb',
    'upsurging',
    'on the rise',
    'escalation',
    'development',
    'onward',
    'propelling',
    'thriving',
    'advancement',
    'going sky-high',
    'jumping up',
    'stepping up',
    'ascension',
    'clambering',
    'skyward movement',
    'sky-high',
    'towering',
    'exponential growth',
    'ascending order',
    'scaling',
    'spiraling upward',
    'moving skyward',
    'amplification',
    'spiraling upwards',
    'scaling up',
    'spiking',
    'upstairs',
    'heightened',
    'forward',
    'raising',
    'on the upswing',
    'ascending scale',
    'scaling new heights',
    'boosted',
    'upped',
    'rocketing',
    'upscale',
    'sky-scraping',
    'on the up and up',
    'upside',
    'progression',
    'climbing the ladder',
    'flying high',
    'skywalking',
    'ascendancy',
    'vertical',
    'rise and shine',
    'elevated',
    'upsweep',
    'sky-bound',
    'ascending trend',
    'ascent',
    'forward movement',
    'ascending series',
    'uplifted',
    'ramped up',
    "sky's the limit",
    'mounting up',
    'topward',
  ],
};

export const NUMBER_SYNONYMNS: Record<string, number> = {
  one: 1,
  two: 2,
  three: 3,
  four: 4,
  five: 5,
  six: 6,
  seven: 7,
  eight: 8,
  nine: 9,
  ten: 10,
  eleven: 11,
  twelve: 12,
  thirteen: 13,
  fourteen: 14,
  fifteen: 15,
  sixteen: 16,
  seventeen: 17,
  eighteen: 18,
  nineteen: 19,
  twenty: 20,
  thirty: 30,
  forty: 40,
  fifty: 50,
  sixty: 60,
  seventy: 70,
  eighty: 80,
  ninety: 90,
  hundred: 100,
  thousand: 1000,
  thousands: 1000,
  lakh: 100000,
  lakhs: 100000,
  crore: 10000000,
  crores: 10000000,
  million: 1000000,
  millions: 1000000,
  billion: 1000000000,
  billions: 1000000000,
};
export const questionKeywords = [
  'what',
  'who',
  'where',
  'when',
  'why',
  'how',
  'which',
  'whose',
  'whom',
  'can',
  'could',
  'will',
  'would',
  'should',
  'is',
  'are',
  'did',
  'do',
  'does',
  'if',
  'by',
  '?',
];

export const TIME_FILTER_SYNONYMNS = [
  {
    label: 'Last Week',
    value: 'Last Week',
    synonyms: [
      'Past Week',
      'Previous Week',
      'One Week Ago',
      'last',
      'week',
      'last week',
    ],
    alias: (column: string) => `Last ${column} week`,
  },
  {
    label: 'This Week',
    value: 'This Week',
    synonyms: [
      'Current Week',
      'Present Week',
      'This Present Week',
      'this',
      'week',
      'this week',
    ],
    alias: (column: string) => `This ${column} week`,
  },
  {
    label: 'Last Month',
    value: 'Last Month',
    synonyms: [
      'Past Month',
      'Previous Month',
      'One Month Ago',
      'last',
      'month',
      'last month',
    ],
    alias: (column: string) => `Last ${column} month`,
  },
  {
    label: 'This Month',
    value: 'This Month',
    synonyms: [
      'Current Month',
      'Present Month',
      'This Present Month',
      'this',
      'month',
      'this month',
    ],
    alias: (column: string) => `This ${column} month`,
  },
  {
    label: 'Last Year',
    value: 'Last Year',
    synonyms: [
      'Past Year',
      'Previous Year',
      'One Year Ago',
      'last',
      'year',
      'last year',
    ],
    alias: (column: string) => `Last ${column} year`,
  },
  {
    label: 'This Year',
    value: 'This Year',
    synonyms: [
      'Current Year',
      'Present Year',
      'This Present Year',
      'this',
      'year',
      'this year',
    ],
    alias: (column: string) => `This ${column} year`,
  },
  {
    label: 'Yesterday',
    value: 'Yesterday',
    synonyms: [
      'Day Before Today',
      'One Day Ago',
      'Previous Day',
      'last',
      'day',
      'Yesterday',
      'last day',
    ],
    alias: (column: string) => `Last ${column} day`,
  },
  {
    label: 'Today',
    value: 'Today',
    synonyms: [
      'Present Day',
      'Current Day',
      'This Day',
      'this',
      'day',
      'today',
      'this day',
    ],
    alias: (column: string) => `${column} today`,
  },
];

export const NULL_FILTER_SYNONYMNS = [
  {
    value: 'IS NOT NULL',
    label: 'Is not null',
    synonymns: ['null', 'not'],
    alias: (column: string) => `${column} not null`,
  },
  {
    value: 'IS NULL',
    label: 'Is null',
    synonymns: ['null'],
    alias: (column: string) => `${column} null`,
  },
];

export const NUMBER_FILTER_SYNONYMNS = [
  {
    value: '=',
    label: 'Equal to (=)',
    synonymns: ['='],
  },
  {
    value: '<>',
    label: 'Not equal to (!=)',
    synonymns: ['<>', '!='],
  },
  {
    value: '<',
    label: 'Less than (<)',
    synonymns: ['<'],
  },
  {
    value: '<=',
    label: 'Less or equal (<=)',
    synonymns: ['<='],
  },
  {
    value: '>',
    label: 'Greater than (>)',
    synonymns: ['>'],
  },
  {
    value: '>=',
    label: 'Greater or equal (>=)',
    synonymns: ['>='],
  },
];
export const DATASET_OTHER_HELPER_FUNCTIONS = [
  { value: 'ALL', label: 'COUNT ROW' },
  { value: 'COUNT', label: 'COUNT' },
  { value: 'COUNT_DISTINCT', label: 'COUNT_DISTINCT' },
  {
    value: 'NONE',
    label: 'Original Value',
  },
];
export const DATASET_NUM_HELPER_FUNCTIONS = [
  {
    value: 'auto',
    label: 'Auto bin',
  },
  {
    value: '10 bins',
    label: '10 bins',
  },
  {
    value: '50 bins',
    label: '50 bins',
  },
  {
    value: '100 bins',
    label: '100 bins',
  },
  {
    value: 'NONE',
    label: "Don't bin",
  },
];

export const REDSHIFT = 'redshift';
export const SNOWFLAKE = 'snowflake';
export const BIGQUERY = 'bigquery';
export const MYSQL = 'mysql';
export const MSSQL = 'mssql';
export const POSTGRES = 'postgres';
export const MONGODB = 'mongodb';
export const DATABRICKS = 'databricks';
export const CLICKHOUSE = 'clickhouse';
export const AWSS3 = 'awss3';

export const DOWNLOAD_DATA_OPTIONS = {
  RAW_DATA: 'Raw Data',
  DOWNLOAD_WITHOUT_FILTERS: 'Download Without Filters',
  EMAIL_RAW_DATA: 'Email Raw Data',
  PIVOT_CSV: 'Pivot CSV',
  SAVE_AS_PNG: 'Save as PNG',
};
export const CUSTOM_FILTER_TABLE_ALIAS = 'custom_table_alias_rls';

export const CAST_COLUMN_AS = [
  { value: 'integer', label: 'Integer', icon: 'number' },
  { value: 'decimal', label: 'Decimal', icon: 'number' },
  { value: 'date', label: 'Date', icon: 'date' },
  { value: 'NONE', label: 'Default', icon: 'unknown' },
];

export const arithmeticOperators: FloatingDropDownOption[] = [
  { value: '+', label: 'Add (+)', icon: '' },
  { value: '-', label: 'Sub (-)', icon: '' },
  { value: '*', label: 'Multiply (*)', icon: '' },
  { value: '/', label: 'Divide (/)', icon: '' },
];
